#include <iostream>
#include <time.h>
#include <queue>
#include <algorithm>
#include <sstream>
#include <emscripten/bind.h>

#define _TIME_DISABLED false
#define _ENABLE_INVARIANTS_ON 0
#define _TIME if(!_TIME_DISABLED){cout<<(double)(clock() - tStart)/CLOCKS_PER_SEC<<"ms\n";}
#define _FOUND cout<<"YES\n";
#define _NFOUND cout<<"NO\n";

#define _MAX_NODES 13

#define _INF 9999999

using namespace std;
using namespace emscripten;

struct Graph{
    int vertexCount;
    bool** adjacencyMatrix;
};

typedef void (*SwapColsUnrollType) (bool** m, int n, int a, int b);

void SwapColsUnroll1(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;}
void SwapColsUnroll2(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;}
void SwapColsUnroll3(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;}
void SwapColsUnroll4(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;}
void SwapColsUnroll5(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;}
void SwapColsUnroll6(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;}
void SwapColsUnroll7(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;
    swap=m[6][a];
    m[6][a]=m[6][b];
    m[6][b]=swap;}
void SwapColsUnroll8(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;
    swap=m[6][a];
    m[6][a]=m[6][b];
    m[6][b]=swap;
    swap=m[7][a];
    m[7][a]=m[7][b];
    m[7][b]=swap;}
void SwapColsUnroll9(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;
    swap=m[6][a];
    m[6][a]=m[6][b];
    m[6][b]=swap;
    swap=m[7][a];
    m[7][a]=m[7][b];
    m[7][b]=swap;
    swap=m[8][a];
    m[8][a]=m[8][b];
    m[8][b]=swap;}
void SwapColsUnroll10(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;
    swap=m[6][a];
    m[6][a]=m[6][b];
    m[6][b]=swap;
    swap=m[7][a];
    m[7][a]=m[7][b];
    m[7][b]=swap;
    swap=m[8][a];
    m[8][a]=m[8][b];
    m[8][b]=swap;
    swap=m[9][a];
    m[9][a]=m[9][b];
    m[9][b]=swap;}
void SwapColsUnroll11(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;
    swap=m[6][a];
    m[6][a]=m[6][b];
    m[6][b]=swap;
    swap=m[7][a];
    m[7][a]=m[7][b];
    m[7][b]=swap;
    swap=m[8][a];
    m[8][a]=m[8][b];
    m[8][b]=swap;
    swap=m[9][a];
    m[9][a]=m[9][b];
    m[9][b]=swap;
    swap=m[10][a];
    m[10][a]=m[10][b];
    m[10][b]=swap;}
void SwapColsUnroll12(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;
    swap=m[6][a];
    m[6][a]=m[6][b];
    m[6][b]=swap;
    swap=m[7][a];
    m[7][a]=m[7][b];
    m[7][b]=swap;
    swap=m[8][a];
    m[8][a]=m[8][b];
    m[8][b]=swap;
    swap=m[9][a];
    m[9][a]=m[9][b];
    m[9][b]=swap;
    swap=m[10][a];
    m[10][a]=m[10][b];
    m[10][b]=swap;
    swap=m[11][a];
    m[11][a]=m[11][b];
    m[11][b]=swap;}
void SwapColsUnroll13(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;
    swap=m[6][a];
    m[6][a]=m[6][b];
    m[6][b]=swap;
    swap=m[7][a];
    m[7][a]=m[7][b];
    m[7][b]=swap;
    swap=m[8][a];
    m[8][a]=m[8][b];
    m[8][b]=swap;
    swap=m[9][a];
    m[9][a]=m[9][b];
    m[9][b]=swap;
    swap=m[10][a];
    m[10][a]=m[10][b];
    m[10][b]=swap;
    swap=m[11][a];
    m[11][a]=m[11][b];
    m[11][b]=swap;
    swap=m[12][a];
    m[12][a]=m[12][b];
    m[12][b]=swap;}
void SwapColsUnrollN(bool** m, int n, int a, int b){
    int swap=m[0][a];
    m[0][a]=m[0][b];
    m[0][b]=swap;
    swap=m[1][a];
    m[1][a]=m[1][b];
    m[1][b]=swap;
    swap=m[2][a];
    m[2][a]=m[2][b];
    m[2][b]=swap;
    swap=m[3][a];
    m[3][a]=m[3][b];
    m[3][b]=swap;
    swap=m[4][a];
    m[4][a]=m[4][b];
    m[4][b]=swap;
    swap=m[5][a];
    m[5][a]=m[5][b];
    m[5][b]=swap;
    swap=m[6][a];
    m[6][a]=m[6][b];
    m[6][b]=swap;
    swap=m[7][a];
    m[7][a]=m[7][b];
    m[7][b]=swap;
    swap=m[8][a];
    m[8][a]=m[8][b];
    m[8][b]=swap;
    swap=m[9][a];
    m[9][a]=m[9][b];
    m[9][b]=swap;
    swap=m[10][a];
    m[10][a]=m[10][b];
    m[10][b]=swap;
    swap=m[11][a];
    m[11][a]=m[11][b];
    m[11][b]=swap;
    swap=m[12][a];
    m[12][a]=m[12][b];
    m[12][b]=swap;

    for(int i=13;i<n;i++){
        swap=m[i][a];
        m[i][a]=m[i][b];
        m[i][b]=swap;
    }
}

SwapColsUnrollType SwapColsUnroll[]={
    SwapColsUnroll1,
    SwapColsUnroll2,
    SwapColsUnroll3,
    SwapColsUnroll4,
    SwapColsUnroll5,
    SwapColsUnroll6,
    SwapColsUnroll7,
    SwapColsUnroll8,
    SwapColsUnroll9,
    SwapColsUnroll10,
    SwapColsUnroll11,
    SwapColsUnroll12,
    SwapColsUnroll13,
    SwapColsUnrollN
};

typedef bool (*equalMatrixUnrollType) (bool** a, bool** b, int n);

bool equalMatrixUnroll1(bool** a, bool** b, int n){return a[0][0]==b[0][0];}
bool equalMatrixUnroll2(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1];}
bool equalMatrixUnroll3(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2];}
bool equalMatrixUnroll4(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3];}
bool equalMatrixUnroll5(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4];}
bool equalMatrixUnroll6(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5];}
bool equalMatrixUnroll7(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[0][6]==b[0][6] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[1][6]==b[1][6] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[2][6]==b[2][6] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[3][6]==b[3][6] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[4][6]==b[4][6] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5] && 
    a[5][6]==b[5][6] && 
    a[6][0]==b[6][0] && 
    a[6][1]==b[6][1] && 
    a[6][2]==b[6][2] && 
    a[6][3]==b[6][3] && 
    a[6][4]==b[6][4] && 
    a[6][5]==b[6][5] && 
    a[6][6]==b[6][6];}
bool equalMatrixUnroll8(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[0][6]==b[0][6] && 
    a[0][7]==b[0][7] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[1][6]==b[1][6] && 
    a[1][7]==b[1][7] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[2][6]==b[2][6] && 
    a[2][7]==b[2][7] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[3][6]==b[3][6] && 
    a[3][7]==b[3][7] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[4][6]==b[4][6] && 
    a[4][7]==b[4][7] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5] && 
    a[5][6]==b[5][6] && 
    a[5][7]==b[5][7] && 
    a[6][0]==b[6][0] && 
    a[6][1]==b[6][1] && 
    a[6][2]==b[6][2] && 
    a[6][3]==b[6][3] && 
    a[6][4]==b[6][4] && 
    a[6][5]==b[6][5] && 
    a[6][6]==b[6][6] && 
    a[6][7]==b[6][7] && 
    a[7][0]==b[7][0] && 
    a[7][1]==b[7][1] && 
    a[7][2]==b[7][2] && 
    a[7][3]==b[7][3] && 
    a[7][4]==b[7][4] && 
    a[7][5]==b[7][5] && 
    a[7][6]==b[7][6] && 
    a[7][7]==b[7][7];}
bool equalMatrixUnroll9(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[0][6]==b[0][6] && 
    a[0][7]==b[0][7] && 
    a[0][8]==b[0][8] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[1][6]==b[1][6] && 
    a[1][7]==b[1][7] && 
    a[1][8]==b[1][8] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[2][6]==b[2][6] && 
    a[2][7]==b[2][7] && 
    a[2][8]==b[2][8] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[3][6]==b[3][6] && 
    a[3][7]==b[3][7] && 
    a[3][8]==b[3][8] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[4][6]==b[4][6] && 
    a[4][7]==b[4][7] && 
    a[4][8]==b[4][8] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5] && 
    a[5][6]==b[5][6] && 
    a[5][7]==b[5][7] && 
    a[5][8]==b[5][8] && 
    a[6][0]==b[6][0] && 
    a[6][1]==b[6][1] && 
    a[6][2]==b[6][2] && 
    a[6][3]==b[6][3] && 
    a[6][4]==b[6][4] && 
    a[6][5]==b[6][5] && 
    a[6][6]==b[6][6] && 
    a[6][7]==b[6][7] && 
    a[6][8]==b[6][8] && 
    a[7][0]==b[7][0] && 
    a[7][1]==b[7][1] && 
    a[7][2]==b[7][2] && 
    a[7][3]==b[7][3] && 
    a[7][4]==b[7][4] && 
    a[7][5]==b[7][5] && 
    a[7][6]==b[7][6] && 
    a[7][7]==b[7][7] && 
    a[7][8]==b[7][8] && 
    a[8][0]==b[8][0] && 
    a[8][1]==b[8][1] && 
    a[8][2]==b[8][2] && 
    a[8][3]==b[8][3] && 
    a[8][4]==b[8][4] && 
    a[8][5]==b[8][5] && 
    a[8][6]==b[8][6] && 
    a[8][7]==b[8][7] && 
    a[8][8]==b[8][8];}
bool equalMatrixUnroll10(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[0][6]==b[0][6] && 
    a[0][7]==b[0][7] && 
    a[0][8]==b[0][8] && 
    a[0][9]==b[0][9] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[1][6]==b[1][6] && 
    a[1][7]==b[1][7] && 
    a[1][8]==b[1][8] && 
    a[1][9]==b[1][9] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[2][6]==b[2][6] && 
    a[2][7]==b[2][7] && 
    a[2][8]==b[2][8] && 
    a[2][9]==b[2][9] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[3][6]==b[3][6] && 
    a[3][7]==b[3][7] && 
    a[3][8]==b[3][8] && 
    a[3][9]==b[3][9] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[4][6]==b[4][6] && 
    a[4][7]==b[4][7] && 
    a[4][8]==b[4][8] && 
    a[4][9]==b[4][9] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5] && 
    a[5][6]==b[5][6] && 
    a[5][7]==b[5][7] && 
    a[5][8]==b[5][8] && 
    a[5][9]==b[5][9] && 
    a[6][0]==b[6][0] && 
    a[6][1]==b[6][1] && 
    a[6][2]==b[6][2] && 
    a[6][3]==b[6][3] && 
    a[6][4]==b[6][4] && 
    a[6][5]==b[6][5] && 
    a[6][6]==b[6][6] && 
    a[6][7]==b[6][7] && 
    a[6][8]==b[6][8] && 
    a[6][9]==b[6][9] && 
    a[7][0]==b[7][0] && 
    a[7][1]==b[7][1] && 
    a[7][2]==b[7][2] && 
    a[7][3]==b[7][3] && 
    a[7][4]==b[7][4] && 
    a[7][5]==b[7][5] && 
    a[7][6]==b[7][6] && 
    a[7][7]==b[7][7] && 
    a[7][8]==b[7][8] && 
    a[7][9]==b[7][9] && 
    a[8][0]==b[8][0] && 
    a[8][1]==b[8][1] && 
    a[8][2]==b[8][2] && 
    a[8][3]==b[8][3] && 
    a[8][4]==b[8][4] && 
    a[8][5]==b[8][5] && 
    a[8][6]==b[8][6] && 
    a[8][7]==b[8][7] && 
    a[8][8]==b[8][8] && 
    a[8][9]==b[8][9] && 
    a[9][0]==b[9][0] && 
    a[9][1]==b[9][1] && 
    a[9][2]==b[9][2] && 
    a[9][3]==b[9][3] && 
    a[9][4]==b[9][4] && 
    a[9][5]==b[9][5] && 
    a[9][6]==b[9][6] && 
    a[9][7]==b[9][7] && 
    a[9][8]==b[9][8] && 
    a[9][9]==b[9][9];}
bool equalMatrixUnroll11(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[0][6]==b[0][6] && 
    a[0][7]==b[0][7] && 
    a[0][8]==b[0][8] && 
    a[0][9]==b[0][9] && 
    a[0][10]==b[0][10] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[1][6]==b[1][6] && 
    a[1][7]==b[1][7] && 
    a[1][8]==b[1][8] && 
    a[1][9]==b[1][9] && 
    a[1][10]==b[1][10] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[2][6]==b[2][6] && 
    a[2][7]==b[2][7] && 
    a[2][8]==b[2][8] && 
    a[2][9]==b[2][9] && 
    a[2][10]==b[2][10] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[3][6]==b[3][6] && 
    a[3][7]==b[3][7] && 
    a[3][8]==b[3][8] && 
    a[3][9]==b[3][9] && 
    a[3][10]==b[3][10] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[4][6]==b[4][6] && 
    a[4][7]==b[4][7] && 
    a[4][8]==b[4][8] && 
    a[4][9]==b[4][9] && 
    a[4][10]==b[4][10] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5] && 
    a[5][6]==b[5][6] && 
    a[5][7]==b[5][7] && 
    a[5][8]==b[5][8] && 
    a[5][9]==b[5][9] && 
    a[5][10]==b[5][10] && 
    a[6][0]==b[6][0] && 
    a[6][1]==b[6][1] && 
    a[6][2]==b[6][2] && 
    a[6][3]==b[6][3] && 
    a[6][4]==b[6][4] && 
    a[6][5]==b[6][5] && 
    a[6][6]==b[6][6] && 
    a[6][7]==b[6][7] && 
    a[6][8]==b[6][8] && 
    a[6][9]==b[6][9] && 
    a[6][10]==b[6][10] && 
    a[7][0]==b[7][0] && 
    a[7][1]==b[7][1] && 
    a[7][2]==b[7][2] && 
    a[7][3]==b[7][3] && 
    a[7][4]==b[7][4] && 
    a[7][5]==b[7][5] && 
    a[7][6]==b[7][6] && 
    a[7][7]==b[7][7] && 
    a[7][8]==b[7][8] && 
    a[7][9]==b[7][9] && 
    a[7][10]==b[7][10] && 
    a[8][0]==b[8][0] && 
    a[8][1]==b[8][1] && 
    a[8][2]==b[8][2] && 
    a[8][3]==b[8][3] && 
    a[8][4]==b[8][4] && 
    a[8][5]==b[8][5] && 
    a[8][6]==b[8][6] && 
    a[8][7]==b[8][7] && 
    a[8][8]==b[8][8] && 
    a[8][9]==b[8][9] && 
    a[8][10]==b[8][10] && 
    a[9][0]==b[9][0] && 
    a[9][1]==b[9][1] && 
    a[9][2]==b[9][2] && 
    a[9][3]==b[9][3] && 
    a[9][4]==b[9][4] && 
    a[9][5]==b[9][5] && 
    a[9][6]==b[9][6] && 
    a[9][7]==b[9][7] && 
    a[9][8]==b[9][8] && 
    a[9][9]==b[9][9] && 
    a[9][10]==b[9][10] && 
    a[10][0]==b[10][0] && 
    a[10][1]==b[10][1] && 
    a[10][2]==b[10][2] && 
    a[10][3]==b[10][3] && 
    a[10][4]==b[10][4] && 
    a[10][5]==b[10][5] && 
    a[10][6]==b[10][6] && 
    a[10][7]==b[10][7] && 
    a[10][8]==b[10][8] && 
    a[10][9]==b[10][9] && 
    a[10][10]==b[10][10];}
bool equalMatrixUnroll12(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[0][6]==b[0][6] && 
    a[0][7]==b[0][7] && 
    a[0][8]==b[0][8] && 
    a[0][9]==b[0][9] && 
    a[0][10]==b[0][10] && 
    a[0][11]==b[0][11] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[1][6]==b[1][6] && 
    a[1][7]==b[1][7] && 
    a[1][8]==b[1][8] && 
    a[1][9]==b[1][9] && 
    a[1][10]==b[1][10] && 
    a[1][11]==b[1][11] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[2][6]==b[2][6] && 
    a[2][7]==b[2][7] && 
    a[2][8]==b[2][8] && 
    a[2][9]==b[2][9] && 
    a[2][10]==b[2][10] && 
    a[2][11]==b[2][11] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[3][6]==b[3][6] && 
    a[3][7]==b[3][7] && 
    a[3][8]==b[3][8] && 
    a[3][9]==b[3][9] && 
    a[3][10]==b[3][10] && 
    a[3][11]==b[3][11] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[4][6]==b[4][6] && 
    a[4][7]==b[4][7] && 
    a[4][8]==b[4][8] && 
    a[4][9]==b[4][9] && 
    a[4][10]==b[4][10] && 
    a[4][11]==b[4][11] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5] && 
    a[5][6]==b[5][6] && 
    a[5][7]==b[5][7] && 
    a[5][8]==b[5][8] && 
    a[5][9]==b[5][9] && 
    a[5][10]==b[5][10] && 
    a[5][11]==b[5][11] && 
    a[6][0]==b[6][0] && 
    a[6][1]==b[6][1] && 
    a[6][2]==b[6][2] && 
    a[6][3]==b[6][3] && 
    a[6][4]==b[6][4] && 
    a[6][5]==b[6][5] && 
    a[6][6]==b[6][6] && 
    a[6][7]==b[6][7] && 
    a[6][8]==b[6][8] && 
    a[6][9]==b[6][9] && 
    a[6][10]==b[6][10] && 
    a[6][11]==b[6][11] && 
    a[7][0]==b[7][0] && 
    a[7][1]==b[7][1] && 
    a[7][2]==b[7][2] && 
    a[7][3]==b[7][3] && 
    a[7][4]==b[7][4] && 
    a[7][5]==b[7][5] && 
    a[7][6]==b[7][6] && 
    a[7][7]==b[7][7] && 
    a[7][8]==b[7][8] && 
    a[7][9]==b[7][9] && 
    a[7][10]==b[7][10] && 
    a[7][11]==b[7][11] && 
    a[8][0]==b[8][0] && 
    a[8][1]==b[8][1] && 
    a[8][2]==b[8][2] && 
    a[8][3]==b[8][3] && 
    a[8][4]==b[8][4] && 
    a[8][5]==b[8][5] && 
    a[8][6]==b[8][6] && 
    a[8][7]==b[8][7] && 
    a[8][8]==b[8][8] && 
    a[8][9]==b[8][9] && 
    a[8][10]==b[8][10] && 
    a[8][11]==b[8][11] && 
    a[9][0]==b[9][0] && 
    a[9][1]==b[9][1] && 
    a[9][2]==b[9][2] && 
    a[9][3]==b[9][3] && 
    a[9][4]==b[9][4] && 
    a[9][5]==b[9][5] && 
    a[9][6]==b[9][6] && 
    a[9][7]==b[9][7] && 
    a[9][8]==b[9][8] && 
    a[9][9]==b[9][9] && 
    a[9][10]==b[9][10] && 
    a[9][11]==b[9][11] && 
    a[10][0]==b[10][0] && 
    a[10][1]==b[10][1] && 
    a[10][2]==b[10][2] && 
    a[10][3]==b[10][3] && 
    a[10][4]==b[10][4] && 
    a[10][5]==b[10][5] && 
    a[10][6]==b[10][6] && 
    a[10][7]==b[10][7] && 
    a[10][8]==b[10][8] && 
    a[10][9]==b[10][9] && 
    a[10][10]==b[10][10] && 
    a[10][11]==b[10][11] && 
    a[11][0]==b[11][0] && 
    a[11][1]==b[11][1] && 
    a[11][2]==b[11][2] && 
    a[11][3]==b[11][3] && 
    a[11][4]==b[11][4] && 
    a[11][5]==b[11][5] && 
    a[11][6]==b[11][6] && 
    a[11][7]==b[11][7] && 
    a[11][8]==b[11][8] && 
    a[11][9]==b[11][9] && 
    a[11][10]==b[11][10] && 
    a[11][11]==b[11][11];}
bool equalMatrixUnroll13(bool** a, bool** b, int n){
    return a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[0][6]==b[0][6] && 
    a[0][7]==b[0][7] && 
    a[0][8]==b[0][8] && 
    a[0][9]==b[0][9] && 
    a[0][10]==b[0][10] && 
    a[0][11]==b[0][11] && 
    a[0][12]==b[0][12] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[1][6]==b[1][6] && 
    a[1][7]==b[1][7] && 
    a[1][8]==b[1][8] && 
    a[1][9]==b[1][9] && 
    a[1][10]==b[1][10] && 
    a[1][11]==b[1][11] && 
    a[1][12]==b[1][12] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[2][6]==b[2][6] && 
    a[2][7]==b[2][7] && 
    a[2][8]==b[2][8] && 
    a[2][9]==b[2][9] && 
    a[2][10]==b[2][10] && 
    a[2][11]==b[2][11] && 
    a[2][12]==b[2][12] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[3][6]==b[3][6] && 
    a[3][7]==b[3][7] && 
    a[3][8]==b[3][8] && 
    a[3][9]==b[3][9] && 
    a[3][10]==b[3][10] && 
    a[3][11]==b[3][11] && 
    a[3][12]==b[3][12] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[4][6]==b[4][6] && 
    a[4][7]==b[4][7] && 
    a[4][8]==b[4][8] && 
    a[4][9]==b[4][9] && 
    a[4][10]==b[4][10] && 
    a[4][11]==b[4][11] && 
    a[4][12]==b[4][12] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5] && 
    a[5][6]==b[5][6] && 
    a[5][7]==b[5][7] && 
    a[5][8]==b[5][8] && 
    a[5][9]==b[5][9] && 
    a[5][10]==b[5][10] && 
    a[5][11]==b[5][11] && 
    a[5][12]==b[5][12] && 
    a[6][0]==b[6][0] && 
    a[6][1]==b[6][1] && 
    a[6][2]==b[6][2] && 
    a[6][3]==b[6][3] && 
    a[6][4]==b[6][4] && 
    a[6][5]==b[6][5] && 
    a[6][6]==b[6][6] && 
    a[6][7]==b[6][7] && 
    a[6][8]==b[6][8] && 
    a[6][9]==b[6][9] && 
    a[6][10]==b[6][10] && 
    a[6][11]==b[6][11] && 
    a[6][12]==b[6][12] && 
    a[7][0]==b[7][0] && 
    a[7][1]==b[7][1] && 
    a[7][2]==b[7][2] && 
    a[7][3]==b[7][3] && 
    a[7][4]==b[7][4] && 
    a[7][5]==b[7][5] && 
    a[7][6]==b[7][6] && 
    a[7][7]==b[7][7] && 
    a[7][8]==b[7][8] && 
    a[7][9]==b[7][9] && 
    a[7][10]==b[7][10] && 
    a[7][11]==b[7][11] && 
    a[7][12]==b[7][12] && 
    a[8][0]==b[8][0] && 
    a[8][1]==b[8][1] && 
    a[8][2]==b[8][2] && 
    a[8][3]==b[8][3] && 
    a[8][4]==b[8][4] && 
    a[8][5]==b[8][5] && 
    a[8][6]==b[8][6] && 
    a[8][7]==b[8][7] && 
    a[8][8]==b[8][8] && 
    a[8][9]==b[8][9] && 
    a[8][10]==b[8][10] && 
    a[8][11]==b[8][11] && 
    a[8][12]==b[8][12] && 
    a[9][0]==b[9][0] && 
    a[9][1]==b[9][1] && 
    a[9][2]==b[9][2] && 
    a[9][3]==b[9][3] && 
    a[9][4]==b[9][4] && 
    a[9][5]==b[9][5] && 
    a[9][6]==b[9][6] && 
    a[9][7]==b[9][7] && 
    a[9][8]==b[9][8] && 
    a[9][9]==b[9][9] && 
    a[9][10]==b[9][10] && 
    a[9][11]==b[9][11] && 
    a[9][12]==b[9][12] && 
    a[10][0]==b[10][0] && 
    a[10][1]==b[10][1] && 
    a[10][2]==b[10][2] && 
    a[10][3]==b[10][3] && 
    a[10][4]==b[10][4] && 
    a[10][5]==b[10][5] && 
    a[10][6]==b[10][6] && 
    a[10][7]==b[10][7] && 
    a[10][8]==b[10][8] && 
    a[10][9]==b[10][9] && 
    a[10][10]==b[10][10] && 
    a[10][11]==b[10][11] && 
    a[10][12]==b[10][12] && 
    a[11][0]==b[11][0] && 
    a[11][1]==b[11][1] && 
    a[11][2]==b[11][2] && 
    a[11][3]==b[11][3] && 
    a[11][4]==b[11][4] && 
    a[11][5]==b[11][5] && 
    a[11][6]==b[11][6] && 
    a[11][7]==b[11][7] && 
    a[11][8]==b[11][8] && 
    a[11][9]==b[11][9] && 
    a[11][10]==b[11][10] && 
    a[11][11]==b[11][11] && 
    a[11][12]==b[11][12] && 
    a[12][0]==b[12][0] && 
    a[12][1]==b[12][1] && 
    a[12][2]==b[12][2] && 
    a[12][3]==b[12][3] && 
    a[12][4]==b[12][4] && 
    a[12][5]==b[12][5] && 
    a[12][6]==b[12][6] && 
    a[12][7]==b[12][7] && 
    a[12][8]==b[12][8] && 
    a[12][9]==b[12][9] && 
    a[12][10]==b[12][10] && 
    a[12][11]==b[12][11] && 
    a[12][12]==b[12][12];}
bool equalMatrixUnrollN(bool** a, bool** b, int n){
    if(a[0][0]==b[0][0] && 
    a[0][1]==b[0][1] && 
    a[0][2]==b[0][2] && 
    a[0][3]==b[0][3] && 
    a[0][4]==b[0][4] && 
    a[0][5]==b[0][5] && 
    a[0][6]==b[0][6] && 
    a[0][7]==b[0][7] && 
    a[0][8]==b[0][8] && 
    a[0][9]==b[0][9] && 
    a[0][10]==b[0][10] && 
    a[0][11]==b[0][11] && 
    a[0][12]==b[0][12] && 
    a[1][0]==b[1][0] && 
    a[1][1]==b[1][1] && 
    a[1][2]==b[1][2] && 
    a[1][3]==b[1][3] && 
    a[1][4]==b[1][4] && 
    a[1][5]==b[1][5] && 
    a[1][6]==b[1][6] && 
    a[1][7]==b[1][7] && 
    a[1][8]==b[1][8] && 
    a[1][9]==b[1][9] && 
    a[1][10]==b[1][10] && 
    a[1][11]==b[1][11] && 
    a[1][12]==b[1][12] && 
    a[2][0]==b[2][0] && 
    a[2][1]==b[2][1] && 
    a[2][2]==b[2][2] && 
    a[2][3]==b[2][3] && 
    a[2][4]==b[2][4] && 
    a[2][5]==b[2][5] && 
    a[2][6]==b[2][6] && 
    a[2][7]==b[2][7] && 
    a[2][8]==b[2][8] && 
    a[2][9]==b[2][9] && 
    a[2][10]==b[2][10] && 
    a[2][11]==b[2][11] && 
    a[2][12]==b[2][12] && 
    a[3][0]==b[3][0] && 
    a[3][1]==b[3][1] && 
    a[3][2]==b[3][2] && 
    a[3][3]==b[3][3] && 
    a[3][4]==b[3][4] && 
    a[3][5]==b[3][5] && 
    a[3][6]==b[3][6] && 
    a[3][7]==b[3][7] && 
    a[3][8]==b[3][8] && 
    a[3][9]==b[3][9] && 
    a[3][10]==b[3][10] && 
    a[3][11]==b[3][11] && 
    a[3][12]==b[3][12] && 
    a[4][0]==b[4][0] && 
    a[4][1]==b[4][1] && 
    a[4][2]==b[4][2] && 
    a[4][3]==b[4][3] && 
    a[4][4]==b[4][4] && 
    a[4][5]==b[4][5] && 
    a[4][6]==b[4][6] && 
    a[4][7]==b[4][7] && 
    a[4][8]==b[4][8] && 
    a[4][9]==b[4][9] && 
    a[4][10]==b[4][10] && 
    a[4][11]==b[4][11] && 
    a[4][12]==b[4][12] && 
    a[5][0]==b[5][0] && 
    a[5][1]==b[5][1] && 
    a[5][2]==b[5][2] && 
    a[5][3]==b[5][3] && 
    a[5][4]==b[5][4] && 
    a[5][5]==b[5][5] && 
    a[5][6]==b[5][6] && 
    a[5][7]==b[5][7] && 
    a[5][8]==b[5][8] && 
    a[5][9]==b[5][9] && 
    a[5][10]==b[5][10] && 
    a[5][11]==b[5][11] && 
    a[5][12]==b[5][12] && 
    a[6][0]==b[6][0] && 
    a[6][1]==b[6][1] && 
    a[6][2]==b[6][2] && 
    a[6][3]==b[6][3] && 
    a[6][4]==b[6][4] && 
    a[6][5]==b[6][5] && 
    a[6][6]==b[6][6] && 
    a[6][7]==b[6][7] && 
    a[6][8]==b[6][8] && 
    a[6][9]==b[6][9] && 
    a[6][10]==b[6][10] && 
    a[6][11]==b[6][11] && 
    a[6][12]==b[6][12] && 
    a[7][0]==b[7][0] && 
    a[7][1]==b[7][1] && 
    a[7][2]==b[7][2] && 
    a[7][3]==b[7][3] && 
    a[7][4]==b[7][4] && 
    a[7][5]==b[7][5] && 
    a[7][6]==b[7][6] && 
    a[7][7]==b[7][7] && 
    a[7][8]==b[7][8] && 
    a[7][9]==b[7][9] && 
    a[7][10]==b[7][10] && 
    a[7][11]==b[7][11] && 
    a[7][12]==b[7][12] && 
    a[8][0]==b[8][0] && 
    a[8][1]==b[8][1] && 
    a[8][2]==b[8][2] && 
    a[8][3]==b[8][3] && 
    a[8][4]==b[8][4] && 
    a[8][5]==b[8][5] && 
    a[8][6]==b[8][6] && 
    a[8][7]==b[8][7] && 
    a[8][8]==b[8][8] && 
    a[8][9]==b[8][9] && 
    a[8][10]==b[8][10] && 
    a[8][11]==b[8][11] && 
    a[8][12]==b[8][12] && 
    a[9][0]==b[9][0] && 
    a[9][1]==b[9][1] && 
    a[9][2]==b[9][2] && 
    a[9][3]==b[9][3] && 
    a[9][4]==b[9][4] && 
    a[9][5]==b[9][5] && 
    a[9][6]==b[9][6] && 
    a[9][7]==b[9][7] && 
    a[9][8]==b[9][8] && 
    a[9][9]==b[9][9] && 
    a[9][10]==b[9][10] && 
    a[9][11]==b[9][11] && 
    a[9][12]==b[9][12] && 
    a[10][0]==b[10][0] && 
    a[10][1]==b[10][1] && 
    a[10][2]==b[10][2] && 
    a[10][3]==b[10][3] && 
    a[10][4]==b[10][4] && 
    a[10][5]==b[10][5] && 
    a[10][6]==b[10][6] && 
    a[10][7]==b[10][7] && 
    a[10][8]==b[10][8] && 
    a[10][9]==b[10][9] && 
    a[10][10]==b[10][10] && 
    a[10][11]==b[10][11] && 
    a[10][12]==b[10][12] && 
    a[11][0]==b[11][0] && 
    a[11][1]==b[11][1] && 
    a[11][2]==b[11][2] && 
    a[11][3]==b[11][3] && 
    a[11][4]==b[11][4] && 
    a[11][5]==b[11][5] && 
    a[11][6]==b[11][6] && 
    a[11][7]==b[11][7] && 
    a[11][8]==b[11][8] && 
    a[11][9]==b[11][9] && 
    a[11][10]==b[11][10] && 
    a[11][11]==b[11][11] && 
    a[11][12]==b[11][12] && 
    a[12][0]==b[12][0] && 
    a[12][1]==b[12][1] && 
    a[12][2]==b[12][2] && 
    a[12][3]==b[12][3] && 
    a[12][4]==b[12][4] && 
    a[12][5]==b[12][5] && 
    a[12][6]==b[12][6] && 
    a[12][7]==b[12][7] && 
    a[12][8]==b[12][8] && 
    a[12][9]==b[12][9] && 
    a[12][10]==b[12][10] && 
    a[12][11]==b[12][11] && 
    a[12][12]==b[12][12]){
        bool equal = true;
            for(int k=13;k<n && equal;k++)
                for(int j=13;j<n && equal;j++)
                        equal=a[k][j]==b[k][j];
        return equal;
    }
    else
        return false;}

equalMatrixUnrollType equalMatrixUnroll[]={
    equalMatrixUnroll1,
    equalMatrixUnroll2,
    equalMatrixUnroll3,
    equalMatrixUnroll4,
    equalMatrixUnroll5,
    equalMatrixUnroll6,
    equalMatrixUnroll7,
    equalMatrixUnroll8,
    equalMatrixUnroll9,
    equalMatrixUnroll10,
    equalMatrixUnroll11,
    equalMatrixUnroll12,
    equalMatrixUnroll13,
    equalMatrixUnrollN
};

Graph loadGraph(int n, istringstream& input){
    Graph graph;

    graph.vertexCount=n;
    graph.adjacencyMatrix=new bool*[graph.vertexCount];

    bool buf;
    int row_counter=0,col_counter=0,c=0;
    graph.adjacencyMatrix[row_counter]=new bool[graph.vertexCount];
    while(c++<n*n && input >> buf){
        if(col_counter==graph.vertexCount){
            col_counter=0;
            row_counter++;
            graph.adjacencyMatrix[row_counter]=new bool[graph.vertexCount];
        }
        graph.adjacencyMatrix[row_counter][col_counter++]=buf;
    }
    return graph;
};


int ConnectedComponents(Graph g, int n){
    bool* used = new bool[n];
    int c_node;
    int cc=1;
    for(int i=0;i<n;i++)
      used[i]=false;
    for(int i=0;i<n;i++){
        if(used[i])
            continue;
        queue<int> q;
        q.push(i);
        while(!q.empty()){
            c_node = q.front();q.pop();

            if(used[c_node])continue;
            used[c_node]=true;

            for(int j=0;j<n;j++)
                if(g.adjacencyMatrix[c_node][j])
                    q.push(j);
        }
        for(int j=0;j<n;j++)
            if(!used[j]){
                cc++;
                break;
            }
    }
    return cc;
}

int idx[_MAX_NODES];

bool process(string input_string){
    istringstream input(input_string);
    int n,_n_call;
    input>>n;
    _n_call=n-1>13?13:n-1;
    Graph graph_a = loadGraph(n, input);
    Graph graph_b = loadGraph(n, input);
    
    /**
     * Compare adjacency matrix of graph a and graph b
     */
    bool equal = equalMatrixUnroll[_n_call](graph_a.adjacencyMatrix,graph_b.adjacencyMatrix,n);
    /**
     * If equal===true then graph a and graph b isomorphic
     */
    if(equal){
        return true;
    }

    if(n>=_ENABLE_INVARIANTS_ON){
        /** Edges and passport **/
        int a_edges=0,b_edges=0;
        int* a_passport = new int[n];
        int* b_passport = new int[n];
        for(int x=0;x<n;x++){
            a_passport[x]=0;
            b_passport[x]=0;
            for(int y=0;y<n;y++){
                    a_edges+=graph_a.adjacencyMatrix[x][y];
                    b_edges+=graph_b.adjacencyMatrix[x][y];

                    a_passport[x]+=graph_a.adjacencyMatrix[x][y];
                    b_passport[x]+=graph_b.adjacencyMatrix[x][y];
            }
        }
        /** If graphs have diffrent number of edges **/
        if(a_edges!=b_edges){
            return false;
        }
        sort(a_passport,a_passport+n);
        sort(b_passport,b_passport+n);
        /** If their passports are not equal **/
        for(int i=0;i<n;i++)
            if(a_passport[i]!=b_passport[i]){
                return false;
            }
        /**/

        /** Diametr and cycles **/
        int* m_a = new int[n];
        int* m_b = new int[n];
        int d_a=0,d_b=0;
        queue<int> q;
        int c_node;
        bool cycles_a=false, cycles_b=false;
        int min_cycle_a=_INF, min_cycle_b=_INF;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                m_a[j]=0;
                m_b[j]=0;
            }
            q.push(i);
            while(!q.empty()){
                c_node = q.front();q.pop();
                if(m_a[c_node]>d_a)d_a=m_a[c_node];
                for(int j=0;j<n;j++){
                    if(!m_a[j] && graph_a.adjacencyMatrix[c_node][j]){
                        q.push(j);
                        m_a[j]=m_a[c_node]+1;
                    }
                    cycles_a=cycles_a || m_a[j]>=m_a[c_node];
                    if(m_a[j]>=2 && m_a[j]>=m_a[c_node] && min_cycle_a>m_a[j])
                        min_cycle_a=m_a[j];
                }
            }
            q.push(i);
            while(!q.empty()){
                c_node = q.front();q.pop();
                if(m_b[c_node]>d_b)d_b=m_b[c_node];
                for(int j=0;j<n;j++){
                    if(!m_b[j] && graph_b.adjacencyMatrix[c_node][j]){
                        q.push(j);
                        m_b[j]=m_b[c_node]+1;
                    }
                    cycles_b=cycles_b || m_b[j]>=m_b[c_node];
                    if(m_b[j]>=2 && m_b[j]>=m_b[c_node] && min_cycle_b>m_b[j])
                        min_cycle_b=m_b[j];
                }
            }
        }
        /** if diamters != */
        if(d_a!=d_b){
            return false;
        }
        /** if one have cycle and other dont **/
        if(cycles_b!=cycles_a){
          return false;
        }
        if(min_cycle_b!=min_cycle_a){
            return false;   
        }
        /**/

        /** Connected components **/
        int a_cc = ConnectedComponents(graph_a,n);
        int b_cc = ConnectedComponents(graph_b,n);
        if(a_cc!=b_cc){
            return false;
        }
        /**/
    }

    /**
     * Enumerate permutations and permutate matrices
     */
    bool* swap_ptr;
    int a;
    
    for(int i=1; i<n;)
        if (idx[i] < i) {
            bool equal = equalMatrixUnroll[_n_call](graph_a.adjacencyMatrix,graph_b.adjacencyMatrix,n);
            if(equal){
                return true;
            }

            a = i % 2 * idx[i];
            idx[i]++;

            swap_ptr = graph_a.adjacencyMatrix[a];
            graph_a.adjacencyMatrix[a] = graph_a.adjacencyMatrix[i];
            graph_a.adjacencyMatrix[i] = swap_ptr;

            SwapColsUnroll[_n_call](graph_a.adjacencyMatrix,n,a,i);
            i = 1;
        }
        else
            idx[i++] = 0;
    return false;
}

EMSCRIPTEN_BINDINGS(my_module) {
    emscripten::function("process", &process);
}

int main(int argc, char** argv){
    // YOU ARE TEARING ME APART
    return 0;
}

